{"version":3,"sources":["app.js"],"names":["messagesList","document","getElementsByClassName","addMessag","chooseBox","roomsMenu","roomList","roomNewName","getElementById","addUsername","addEventListener","event","preventDefault","inputValue","this","querySelector","value","chat_rooms","addData","reset","setTimeout","scrollTop","scrollHeight","input","name","trim","updateUsername","storagUsername","localStorage","username","e","style","display","target","classList","contains","id","roomName","parentElement","textContent","querySelectorAll","forEach","i","remove","updateRoom","getData","passData","inter_face","displayData","Chatrooms","Interface"],"mappings":"AAAA,aAEA,IAAIA,aAAeC,SAASC,uBAAuB,YAAY,GAC3DC,UAAYF,SAASC,uBAAuB,aAAa,GACzDE,UAAYH,SAASC,uBAAuB,cAAc,GAC1DG,UAAYJ,SAASC,uBAAuB,cAAc,GAC1DI,SAAWL,SAASC,uBAAuB,aAAa,GACxDK,YAAcN,SAASO,eAAe,iBACtCC,YAAcR,SAASC,uBAAuB,gBAAgB,GAKlEC,UAAUO,iBAAiB,SAAU,SAAUC,GAC7CA,EAAMC,iBAEN,IAAIC,EAAaC,KAAKC,cAAc,YAAYC,MAEhD,GAAmB,KAAfH,OACG,CAELI,WAAWC,QAAQL,GAEnBC,KAAKK,QAMLC,WAAW,WAHTpB,aAAaqB,UAAYrB,aAAasB,cAKrC,QAOPb,YAAYC,iBAAiB,SAAU,SAAUC,GAC/CA,EAAMC,iBAEN,IAAIW,EAAQT,KAAKC,cAAc,SAE/B,GAAmB,aAAfQ,EAAMC,KAER,GAAmB,IAAfD,EAAMP,WACH,CACL,IAAIH,EAAaU,EAAMP,MAAMS,OAC7BR,WAAWS,eAAeb,GAK9BC,KAAKK,UAMP,IAAIQ,eAAiBC,aAAaC,SAAWD,aAAaC,SAAW,UAKrEzB,UAAUM,iBAAiB,QAAS,SAAUoB,GAC5CzB,UAAU0B,MAAMC,QAAU,UAM5B3B,UAAUK,iBAAiB,QAAS,SAAUC,GAExCA,EAAMsB,OAAOC,UAAUC,SAAS,cAClCrB,KAAKiB,MAAMC,QAAU,QAIC,UAApBrB,EAAMsB,OAAOG,KACftB,KAAKiB,MAAMC,QAAU,UAOzB1B,SAASI,iBAAiB,QAAS,SAAUC,GAC3C,GAAwB,UAApBA,EAAMsB,OAAOG,GAAgB,CAE/B,IAAIC,EAAW1B,EAAMsB,OAAOK,cAAcF,GAE1C7B,YAAYgC,YAAcF,EAE1BrC,aAAawC,iBAAiB,MAAMC,QAAQ,SAAUC,GACpDA,EAAEC,WAGJ1B,WAAW2B,WAAWP,GAEtBpB,WAAW4B,QAAQ,SAAUC,GAC3B,OAAOC,WAAWC,YAAYF,QAQpC,IAAI7B,WAAa,IAAIgC,UAAUtB,eAAgB,UAC3CoB,WAAa,IAAIG,UAAUlD,cAK/BiB,WAAW4B,QAAQ,SAAUC,GAC3B,OAAOC,WAAWC,YAAYF","sourcesContent":["const messagesList = document.getElementsByClassName(\"messages\")[0],\r\n  addMessag = document.getElementsByClassName(\"add-messg\")[0],\r\n  chooseBox = document.getElementsByClassName(\"choose-box\")[0],\r\n  roomsMenu = document.getElementsByClassName(\"rooms-menu\")[0],\r\n  roomList = document.getElementsByClassName(\"room-list\")[0],\r\n  roomNewName = document.getElementById(\"room-new-name\"),\r\n  addUsername = document.getElementsByClassName(\"add-username\")[0];\r\n\r\n/* ============================================\r\n        Add the message to the database  \r\n============================================= */\r\naddMessag.addEventListener(\"submit\", function(event) {\r\n  event.preventDefault();\r\n  // Get input value\r\n  const inputValue = this.querySelector(\"#message\").value;\r\n\r\n  // Check that the input is not empty\r\n  if (inputValue === '') {\r\n      // error message\r\n  } else {\r\n    // Add data to database\r\n    chat_rooms.addData(inputValue);\r\n\r\n    // Form reset\r\n    this.reset();\r\n\r\n    // message box, Scroll down when you add a new message\r\n    const scrollToDown = () => {\r\n      messagesList.scrollTop = messagesList.scrollHeight;\r\n    };\r\n    setTimeout(() => scrollToDown(), 300);\r\n  }\r\n});\r\n\r\n\r\n/* ============================================\r\n                Updata Username  \r\n============================================= */\r\naddUsername.addEventListener(\"submit\", function(event) {\r\n  event.preventDefault();\r\n\r\n  // Get Input\r\n  const input = this.querySelector(\"input\");\r\n\r\n  // Check the input that contains the username\r\n  if (input.name === \"username\") {\r\n    // Check that the input is not empty\r\n    if(input.value == '') {\r\n      // Error message\r\n    } else {\r\n      const inputValue = input.value.trim();\r\n      chat_rooms.updateUsername(inputValue);\r\n    }\r\n  }\r\n\r\n  // Form reset\r\n  this.reset();\r\n});\r\n\r\n/* ============================================\r\n        Save Username in local storage\r\n============================================= */\r\nconst storagUsername = localStorage.username\r\n  ? localStorage.username\r\n  : \"unknown\";\r\n\r\n/* ============================================\r\n  Show the roomsMenu containing chat room types \r\n============================================= */\r\nchooseBox.addEventListener(\"click\", function(e) {\r\n  roomsMenu.style.display = \"block\";\r\n});\r\n\r\n/* ============================================\r\n  Hide the roomsMenu containing chat room types \r\n============================================= */\r\nroomsMenu.addEventListener(\"click\", function(event) {\r\n  // Close the rooms menu when you press the fa-times\r\n  if (event.target.classList.contains(\"fa-times\")) {\r\n    this.style.display = \"none\";\r\n  }\r\n\r\n  // Close the rooms menu when choosing a chat room\r\n  if(event.target.id === \"check\") {\r\n    this.style.display = \"none\";\r\n  }\r\n});\r\n\r\n/* ============================================\r\n              Change chat room\r\n============================================= */\r\nroomList.addEventListener(\"click\", function(event) {\r\n  if (event.target.id === \"check\") {\r\n    // Get chat room name id\r\n    var roomName = event.target.parentElement.id;\r\n\r\n    // Header > Updata chat room name\r\n    roomNewName.textContent = roomName;\r\n\r\n    // Remove all messages when we choose chat room\r\n    messagesList.querySelectorAll(\"li\").forEach(i => {\r\n      i.remove();\r\n    });\r\n\r\n    // Update chat room name\r\n    chat_rooms.updateRoom(roomName);\r\n\r\n    // Display data for the new chat room\r\n    chat_rooms.getData(passData => inter_face.displayData(passData));\r\n  }\r\n});\r\n\r\n/* ============================================\r\n               Instance of class  \r\n============================================= */\r\nconst chat_rooms = new Chatrooms(storagUsername, \"public\"),\r\n  inter_face = new Interface(messagesList);\r\n\r\n/* ============================================\r\n              display Data \r\n============================================= */\r\nchat_rooms.getData(passData => inter_face.displayData(passData));\r\n"],"file":"app-min.js"}